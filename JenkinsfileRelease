pipeline {

  parameters {
    gitParameter name: 'branch',
                 description: 'The branch to check out',
                 branchFilter: 'origin/(.*)',
                 defaultValue: 'master',
                 selectedValue: 'DEFAULT',
                 type: 'PT_BRANCH',
                 listSize: '0',
                 quickFilterEnabled: true

    string name: 'ReleaseVersion',
           description: 'Version to release',
           defaultValue: ''

    text name: 'ReleaseDescription',
           description: 'Release description',
           defaultValue: ''

    booleanParam name: 'PreRelease',
           description: 'This is a pre-release. Will not publish to npm if selected ',
           defaultValue: false

    string name: 'auth',
           description: 'Jenkins credential ID'
  }

  agent {
    label 'graphdb-jenkins-node'
  }

  options {
    disableConcurrentBuilds()
    timeout(time: 15, unit: 'MINUTES')
    timestamps()
  }

  tools {
    nodejs 'nodejs-14.17.0'
  }

  environment {
    CI = "true"
    NPM_TOKEN = credentials('npm-token')
    API_URL = "https://api.github.com/repos/Ontotext-AD/graphdb.js"
    AUTH = credentials("${auth}")
  }

  stages {
    stage ('Prepare') {
      steps {
        // show node version
        sh "node --version"

        // Switch to branch
        sh "git checkout ${branch}"

        // Change versions
        sh "npm version --git-tag-version=false --allow-same-version=true ${ReleaseVersion}"
        dir("test-e2e/") {
          sh "npm version --git-tag-version=false --allow-same-version=true ${ReleaseVersion}"
        }

        // Install
        sh "npm ci"

        // Build
        sh "npm run build"
      }
    }

    stage ('Publish') {
      steps {
        // Publish on npm
        script {
          if (params.PreRelease == false) {
            sh "echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc && npm publish"
          }
        }
      }
    }
  }

  post {
    success {
      // Commit, tag and push the changes in Git
      sh "git commit -a -m 'Release ${ReleaseVersion}'"
      sh "git tag -a v${ReleaseVersion} -m 'Release v${ReleaseVersion}'"
      sh "git push --set-upstream origin ${branch} && git push --tags"

      script {
        def latest = getLatestReleaseTagName()
        echo "Last revision ${latest}"

        def gitMessages = getReleaseMessagesFromGit(latest)
        echo "Recent merge commit messages collected"

        def result = postRelease(composeReleaseMessage(gitMessages))
        echo result
      }
    }

    failure {
      wrap([$class: 'BuildUser']) {
        emailext(
          to: env.BUILD_USER_EMAIL,
          from: "Jenkins <hudson@ontotext.com>",
          subject: '''[Jenkins] $PROJECT_NAME - Build #$BUILD_NUMBER - $BUILD_STATUS!''',
          mimeType: 'text/html',
          body: '''${SCRIPT, template="groovy-html.template"}'''
        )
      }
    }

    always {
      sh "rm -f .npmrc"
    }
  }
}

// Latest revision tag name getter
def getLatestReleaseTagName() {
  def latest = readJSON text: sh(script: 'curl -H \"Accept: application/vnd.github.v3+json\" ${API_URL}/releases/latest', returnStdout: true)
  return latest.tag_name
}

// Merge commit messages getter
// Returns commit messages between given commit tag and master
def getReleaseMessagesFromGit(String latest) {
  def response = sh(script: "curl -H \"Accept: application/vnd.github.v3+json\" ${API_URL}/compare/${latest}...master", returnStdout: true)
  def resp = readJSON text: response

  def commits = resp.commits
  def message = ""
  def matcher = "Merge pull request #"
  for(commit in commits) {
    if(commit.commit.message != null && commit.commit.message.startsWith(matcher)) {
      // Remove unnecessary repetitive merge descriptions
      def commitMessage = commit.commit.message.substring(matcher.length() - 1)
      message += newlineToHtml("* ${commitMessage}")
    }
  }
  return message
}

// Composes final release message from jenkins build configuration, github commit messages and environment variables
def composeReleaseMessage(String gitMessages) {
   def message = ""
   def releaseDescription = newlineToHtml(params.ReleaseDescription)
   wrap([$class: 'BuildUser']) {
      message = "${releaseDescription} <br/> ${gitMessages} <br/> Released on ${new Date().format("yyyy/MM/dd HH:mm", TimeZone.getTimeZone('UTC'))} UTC by ${env.BUILD_USER}"
    }
  return message
}

// Post release to github
// returns response from the operation
def postRelease(String desc) {
  return sh(script: "curl -X POST -H \"Accept: application/vnd.github.v3+json\" -H \"Authorization: token ${AUTH}\" --data '{\"tag_name\": \"v${ReleaseVersion}\", \"target_commitish\": \"${branch}\", \"name\": \"v${ReleaseVersion}\", \"body\": \"${desc}\", \"draft\": false, \"prerelease\": ${PreRelease}}' ${API_URL}/releases" , returnStdout: true)
}

// New line symbol to html br tag converter.
def newlineToHtml(String desc) {
  def description = ""

  def lines = desc.tokenize("\n")
  for (line in lines) {
    description += line
    description += "<br/>"
  }
  return description
}
